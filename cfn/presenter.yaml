AWSTemplateFormatVersion: '2010-09-09'
Description: 'HTTP API Sample'

Resources:
  LambdaServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"
      Policies:
        - PolicyName: DynamoAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - dynamodb:*
              Resource: !ImportValue StatusDBTableArn
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          import json
          import os
          import boto3

          def lambda_handler(event, context):
            try:
              message_id = send_message_to_sqs(message='Hello')
            except Exception as e:
              print('Exception Message: ' + str(e))
              print("Message wasn't sent: " + queue_name)
              return {
                'statusCode': 500,
                'body': json.dumps('Internal Server Error')
              }
            
            try:
              register_message_id(message_id)
            except Exception as e:
              print('Exception Message: ' + str(e))
              print("Message wasn't registered: " + queue_name)
              return {
                'statusCode': 500,
                'body': json.dumps('Internal Server Error')
              }
          
            return {
              'statusCode': 200,
              'body': json.dumps('Hello from Lambda!')
            }
          
          def send_message_to_sqs(message):
            queue_name = os.environ['QUEUE_NAME']
            sqs = boto3.client("sqs", endpoint_url="https://sqs.ap-northeast-1.amazonaws.com")

            response = sqs.get_queue_url(QueueName=queue_name)
            queue_url = response['QueueUrl']

            response = sqs.send_message(QueueUrl=queue_url, MessageBody='Hello')
            return response['MessageId']
          
          def register_message_id(message_id):
            table_name = os.environ['TABLE_NAME']
            dynamoDB = boto3.resource('dynamodb')
            table= dynamoDB.Table(table_name)
            table.put_item(
              Item = {
                'EventId': message_id,
                'Status': 'CREATED'
                }
                )

            return

      Role: !GetAtt LambdaServiceRole.Arn
      Handler: index.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          QUEUE_NAME: !ImportValue BatchQueueName
          TABLE_NAME: !ImportValue StatusDBTable
    DependsOn:
      - LambdaServiceRole
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: HttpApiSample
      ProtocolType: HTTP
  HttpApiDefaultStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: "$default"
      AutoDeploy: true
  HttpApiHelloIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt Lambda.Arn
      PayloadFormatVersion: '2.0'
  HttpApiHelloIntegrationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt Lambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*/hello"
  HttpApiHelloRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: GET /hello
      AuthorizationType: NONE
      Target: !Sub "integrations/${HttpApiHelloIntegration}"
